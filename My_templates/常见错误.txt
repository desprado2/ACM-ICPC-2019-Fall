ALL:
  #pragma GCC optimize(3)    +     ios::sync_with_stdio(false);
  #pragma comment(linker, "/STACK:102400000,102400000") 开栈
  rand()的上界为32767，如需获得更大的数请rand()*rand()
  int128类:  __int128 但是不能直接输入输出。
  size_t类型是无符号的！！

后缀自动机:
  如果通过反序串做SAM构建后缀树，那么必须在原串末尾加一个识别符号，例如'$'

期望值递推/计数型递推:
  使用 “前一个期望值 + 新增期望” 来更新后一个期望值的时候，注意新增期望应该等于 “增加价值 * 对应前一个期望值的概率”。即：
    E(u)=∑ p(v->u) * (E(v)+Δ(v->u)*p(v)) ，其中p(v->u)是上一个状态转移到当前状态的概率。
  使用 “前一个总和 + 新增部分总和”来更新后一个总和的时候，注意新增总和应该等于  “增加部分的'长度' * 对应前一个总和的方案数”。 即:
    F(n)=∑ g(v->u) * (F(v)+Δ(v->u)*g(v)) ,  其中g(v)是上一个状态的方案数, g(v->u)是上一个状态转移至当前状态的方案数
点分治:
  1.点分治内部不可以使用memset，否则退化为O(n^2)！！
  2.注意每次找重心的“总点数”(即subV)并不是n而是子树的大小。
  3.统计答案的姿势，重点!!
     （1）每次必须减去不经过当前“根”节点的路径，方法是“根节点”答案减去每个儿子的单独贡献（容斥原理）
     （2）从左到右对每个儿子统计数据，然后对于下一个儿子来说，前面的儿子数据已经记录上，则利用该儿子的数据与前面的数据
          计算一次答案，然后将该儿子的数据计入总数据。若路径(u,v)有序，则从左到右和从右到左都分别做一次；否则从左到右
          直接做一次即可。      此方法不需要判重！！

随机三分法:
  对于非严格单调的凸函数，若左等分点和右等分点函数值相等，那么无法判断极值的位置。这时需要在[L,lm],[lm,rm],[rm,R]区间中分别
  随机出几个点，然后再做判断缩小范围。若仍然无法缩小范围（全部相等），可以默认最大值在中间区间内。当R-L小于等于某个值时暴力
  枚举答案。
    务必注意：使用前必须仔细分析函数状况，尽量缩小初始的R-L范围，避免出现极值点与L或者R过于靠近而无法识别出（因为无法断定位
              置的时候默认极值在中间区间取到而舍去了两端）的情况！！！

博弈论:
  如果没有“分割”问题的步骤，也就是没有需要使用sg函数异或和的情况，那么就不要使用sg函数而直接使用0/1表示先手必败/先手必胜态。
  计算sg函数的时候,可以考虑如下方法：设bit[s]是一个bitset，表示sg=s的各个状态能否“反向”到达各个状态。(例如，bit[s][4]=1表示sg=s的各个状态中，至少有一个能够“反向”到达4状态，也即能从4状态走到某个sg=s的状态)
集合枚举子集(高效):
  for (i=S; i; i=(i-1)&S) ....;
  证明略。
二分/插入排序/Two Pointers 模板：
  二分：若目标值是右侧最左边，则判断mid
            若目标值是左侧最右边，则判断mid+1
  插入排序：
   for (i=m; now优于a[i] && i; i--)
        a[i+1]=a[i];
   a[i+1]=now;
  尺取法：
    R=1;
    for (L=1; ...; L++)
      while(当前情况需要更新 && R<=M)
        将a[R]计入答案, R++;
图论问题一定要注意不连通的情况
计算几何若干问题总结：
  long double可以对付1e9整数下的斜率、截距，此时千万不要使用eps
  一定要仔细排除以下特殊情况是否存在：
   1)多点共线
   2)多线共点
   3)线段的起点与终点相等（此时退化为一个点
  epsilon建议值:
          double eps=1e-6;
          long double eps=1e-10;
  判断线段相交时，如果端点也算相交，一定要注意是否还出现了共直线的情况！！因为共直线与端点相交时叉积均为0！不同的是，共直线时四个叉积均为0.
